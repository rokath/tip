package main

import (
	"testing"

	"github.com/rokath/tip/pkg/tip"
	"github.com/tj/assert"
)

func Test_main(t *testing.T) {
	var idTable = []byte{0}
	buf := []byte{0xd1, 0xd2, 0xd3}
	var exp []byte
	if tip.OptimizeUnreplacablesEnabled() {
		if tip.UnreplacableBitCount() == 7 {
			exp = []byte{0x87, 0xd1, 0xd2, 0xd3}
		} else { // == 6
			exp = []byte{0xff, 0xd1, 0xd2, 0xd3}
		}
	} else {
		if tip.UnreplacableBitCount() == 7 {
			exp = []byte{0x87, 0xd1, 0xd2, 0xd3}
		} else { // == 6
			exp = []byte{0xff, 0xd1, 0xd2, 0xd3}
		}
	}
	out := make([]byte, 1000)
	n := tip.TIPack(out, idTable, buf)
	act := out[:n]
	assert.Equal(t, exp, act)
}

func Test_packISSUE(t *testing.T) {
	txt := `<p align="right">(<a href="#tip-um-top">back to top</a>)</p>

##  5.`
	buf := []byte{
		/*00000000*/ 0x3c, 0x70, 0x20, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x3d, 0x22, 0x72, 0x69, 0x67, 0x68, 0x74, 0x22, // |<p align="right"|
		/*00000010*/ 0x3e, 0x28, 0x3c, 0x61, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x23, 0x74, 0x69, 0x70, 0x2d, // |>(<a href="#tip-|
		/*00000020*/ 0x75, 0x6d, 0x2d, 0x74, 0x6f, 0x70, 0x22, 0x3e, 0x62, 0x61, 0x63, 0x6b, 0x20, 0x74, 0x6f, 0x20, // |um-top">back to |
		/*00000030*/ 0x74, 0x6f, 0x70, 0x3c, 0x2f, 0x61, 0x3e, 0x29, 0x3c, 0x2f, 0x70, 0x3e, 0x0a, 0x0a, 0x23, 0x23, // |top</a>)</p>..##|
		/*00000040*/ 0x20, 0x20, 0x35, 0x2e, /*                                                                   */ // |  5.|
	}
	assert.Equal(t, []byte(txt), buf)

	var exp []byte
	if tip.OptimizeUnreplacablesEnabled() {
		if tip.UnreplacableBitCount() == 7 {
			exp = []byte{
				/*00000000*/ 0x80, 0xbc, 0x79, 0xd1, 0x7f, 0xc7, 0x7f, 0xc1, 0x7f, 0xb8, 0xf0, 0x79, 0x79, 0xa8, 0x7f, 0xea, // |..y........yy...|
				/*00000010*/ 0x7f, 0xfe, 0x7e, 0x89, 0x7c, 0x6e, 0x7f, 0xd0, 0x79, 0x0d, 0x50, 0x7f, 0xec, 0x7f, 0x72, 0xe8, // |..~.|n..y.P...r.|
				/*00000020*/ 0xbc, 0xaf, 0x7c, 0x09, 0x79, 0xad, 0x7d, 0x7b, 0xf0, /*                                     */ // |..|.y.}{.|
			}
		} else { // == 6
			//exp = []byte{0xff, 0xd1, 0xd2, 0xd3}
		}
	} else {
		if tip.UnreplacableBitCount() == 7 {
			//exp = []byte{0x87, 0xd1, 0xd2, 0xd3}
		} else { // == 6
			//exp = []byte{0xff, 0xd1, 0xd2, 0xd3}
		}
	}

	out := make([]byte, 1000)
	n := tip.TIPack(out, idTable, buf)
	act := out[:n]
	assert.Equal(t, exp, act)
/*
	back := make([]byte, 1000)
	m := tip.TIUnpack(back, idTable, act[1:])
	untip := back[:m]
	assert.Equal(t, []byte(txt), untip)
*/
	//	out2 := make([]byte, 1000)
	//	n2 := tip.TIPack(out2, idTable, untip)
	//	act2 := out2[:n2]
	//	assert.Equal(t, exp, act2)

}
