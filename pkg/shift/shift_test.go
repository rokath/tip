package shift

import (
	"testing"

	"github.com/tj/assert"
)

var tt = []struct{ u8, u7 []byte }{
	{[]byte{0x05, 0x06}, []byte{0x00, 0x05, 0x06}},
	{[]byte{0xa5, 0x66}, []byte{0x20, 0xa5, 0x66}},
	{[]byte{0x55, 0xb6}, []byte{0x40, 0x55, 0xb6}},
	{[]byte{0xa5, 0xb6}, []byte{0x60, 0xa5, 0xb6}},
	//{[]byte{0x00}, []byte{0x80, 0x80}},
	//{[]byte{0xff}, []byte{0xc0, 0xff}},
	//{[]byte{0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6}, []byte{0xff, 0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6}},
	//{[]byte{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06}, []byte{0x80, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86}},
	//{[]byte{0xa0, 0xb1, 0xc2, 0xd3, 0xe4, 0xf5, 0x56, 0x57}, []byte{0xc0, 0xa0, 0x9f, 0xb1, 0xc2, 0xd3, 0xe4, 0xf5, 0xd6, 0xd7}},
	//{[]byte{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07}, []byte{0x80, 0x80, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87}},
	//{[]byte{0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7}, []byte{0xc0, 0xf0, 0xff, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7}},
}

func Test_Shift87bit(t *testing.T) {
	for _, x := range tt {
		act := Shift87bit(x.u8)
		for i, y := range act { // remove bit 7
			act[i] = byte(0x7f) & y
		}
		assert.Equal(t, x.u7, act)
	}
}

func Test_Shift78bit(t *testing.T) {
	for _, x := range tt {
		act := Shift78bit(x.u7)
		assert.Equal(t, x.u8, act)
	}
}
